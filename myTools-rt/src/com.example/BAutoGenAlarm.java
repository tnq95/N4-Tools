package com.example;

import javax.baja.alarm.ext.BAlarmSourceExt;
import javax.baja.alarm.ext.offnormal.*;
import javax.baja.collection.BITable;
import javax.baja.collection.Column;
import javax.baja.collection.TableCursor;
import javax.baja.control.*;
import javax.baja.naming.BOrd;
import javax.baja.sys.*;

public class BAutoGenAlarm extends BComponent {

    public static final Property path = newProperty(0| Flags.SUMMARY, (BValue) BString.TYPE.getInstance(), null);
    public String getPath() { return getString(path); }
    public void setPath(String v) { setString(path, v, null); }

    public static final Property extensions = newProperty(0|Flags.SUMMARY, (BValue)BDynamicEnum.TYPE.getInstance(), null);
    public BDynamicEnum getExtensions() { return (BDynamicEnum)get(extensions); }
    public void setExtensions(BDynamicEnum v) { set(extensions, v, null); }

    public static final Property point = newProperty(0|Flags.SUMMARY, (BValue)BDynamicEnum.TYPE.getInstance(), null);
    public BDynamicEnum getPoint() { return (BDynamicEnum)get(point); }
    public void setPoint(BDynamicEnum v) { set(point, v, null); }

    public static final Property Err = newProperty(0|Flags.SUMMARY, (BValue)BString.TYPE.getInstance(), null);
    public String getErr() { return getString(Err); }
    public void setErr(String v) { setString(Err, v, null); }

    public static final Action create = newAction(0|Flags.ASYNC, null, null);
    public void create(){ invoke(create, null, null); }

    /** Autogenerated delegate for "onExecute" */
    public void doCreate() throws Exception
    {
        try { onCreate(); }
        catch (Throwable t) { throw new Exception(t); }
    }

    public static final Action remove = newAction(0, null, null);

    public void remove(){ invoke(remove, null, null); }

    /** Autogenerated delegate for "onUpdate" */
    public void doRemove() throws Exception
    {
        try { onRemove(); }
        catch (Throwable t) { throw new Exception(t); }
    }

    public void started() throws Exception { try { onStart(); } catch(Throwable t) { throw new Exception(t); } }

    public void stopped() throws Exception { try { onStop(); } catch(Throwable t) { throw new Exception(t); } }

    public void changed(Property prop, Context cx)
    {
        super.changed(prop, cx);
        if (!isRunning()) return;
        if (Flags.isExecuteOnChange(this, prop)) create();
    }

    public void onStart() throws Exception
    {
        String [] exts = new String[]{"OutOfRangeAlarmExt", "BooleanChangeOfStateAlarmExt",
                "BooleanCommandFailureAlarmExt", "StatusAlarmExt"};
        BEnumRange range = BEnumRange.make(exts);
        setExtensions(BDynamicEnum.make(range));

        String [] extsPoint = new String[]{"NumericPoint","BooleanPoint"};
        BEnumRange erange = BEnumRange.make(extsPoint);
        setPoint(BDynamicEnum.make(erange));

    }
    public void onStop() throws Exception
    {
        // shutdown code here
    }

    //  create Extensions
    public void onCreate() throws Exception
    {
        setErr("");
        init();
        BOrd ord = BOrd.make(getPath().trim() + bql);
        createAlarmExt(ord);
    }

    private void createAlarmExt(BOrd ord) {
        BITable result = (BITable)ord.resolve().get();
        Column []columns = result.getColumns().list();

        Column pSlot = columns[0];
        TableCursor c = (TableCursor)result.cursor();
        while (c.next())
        {
            String point = point = BOrd.make("station:|" + c.cell(pSlot).toString()) + "";
            Object obj = null;

            try{
                obj = BOrd.make(point).resolve().get();
                if( type.equals("NumericPoint") ){    // (obj instanceof BNumericPoint ) &&
                    BAlarmSourceExt source = new BAlarmSourceExt();
                    if(getExtensions().getTag().equals("OutOfRangeAlarmExt")){
                        BOutOfRangeAlgorithm outOfRangeAlgorithm   = new BOutOfRangeAlgorithm();
                        source.setOffnormalAlgorithm (outOfRangeAlgorithm);
                    }
                    else if(getExtensions().getTag().equals("StatusAlarmExt")){
                        BStatusAlgorithm statusAlgorithm = new BStatusAlgorithm();
                        source.setOffnormalAlgorithm (statusAlgorithm);
                    }
                    else return;
                    if(obj instanceof BNumericWritable)
                        ((BNumericWritable)obj).add(extName,source);
                    else ((BNumericPoint)obj).add(extName,source);
                }
                else if( type.equals("BooleanPoint") ){   // (obj instanceof BBooleanPoint ) &&
                    BAlarmSourceExt source = new BAlarmSourceExt();
                    BTwoStateAlgorithm algorithm  = null;
                    if(getExtensions().getTag().equals("BooleanChangeOfStateAlarmExt"))
                    {
                        algorithm= new BBooleanChangeOfStateAlgorithm();
                    }
                    else if(getExtensions().getTag().equals("BooleanCommandFailureAlarmExt"))
                    {
                        algorithm = new BBooleanCommandFailureAlgorithm();
                    }
                    else if(getExtensions().getTag().equals("StatusAlarmExt"))
                    {
                        algorithm = new BStatusAlgorithm();
                    }
                    else return;
                    source.setOffnormalAlgorithm (algorithm);
                    if(obj instanceof BBooleanWritable)
                        ((BBooleanWritable)obj).add(extName,source);
                    else ((BBooleanPoint)obj).add(extName,source);
                }
                else {
                    /// ... :D
                }
            }
            catch(Exception ex){
                System.out.println(point + " >> " + ex);
                setErr(point + " >> " + ex.getMessage());
            }
        }
    }

    public void onRemove() throws Exception {
        setErr("");
        init();
        BOrd ord = BOrd.make(getPath().trim() + bql);
        removeAlarmExt(ord);
    }

    private void removeAlarmExt(BOrd ord) {
        BITable result = (BITable)ord.resolve().get();
        Column []columns = result.getColumns().list();

        Column pSlot = columns[0];
        TableCursor c = (TableCursor)result.cursor();
        while (c.next())
        {
            String point = BOrd.make("station:|" + c.cell(pSlot).toString()) + "";
            Object obj = null;
            try{
                obj = BOrd.make(point).resolve().get();
                if(type.equals("NumericPoint") ){
                    if(obj instanceof BNumericWritable)
                        ((BNumericWritable)obj).remove(extName);
                    else ((BNumericPoint)obj).remove(extName);
                }
                else if(type.equals("BooleanPoint") ){
                    if(obj instanceof BBooleanWritable)
                        ((BBooleanWritable)obj).remove(extName);
                    else ((BBooleanPoint)obj).remove(extName);
                }
                
            }
            catch(Exception ex){
                System.out.println(point + " >> " + ex);
                setErr(point + " >> " + ex.getMessage());
            }
        }
    }

    private void init(){
        extName = getExtensions().getTag();
        type = getPoint().getTag();
        if(type.equals("NumericPoint"))
            bql = "|bql:select * from control:NumericPoint where !slotExists('inA')";
        else if(type.equals("BooleanPoint"))
            bql = "|bql:select * from control:BooleanPoint where !slotExists('inA')";
    }

    public Type getType() { return TYPE; }
    public static final Type TYPE = Sys.loadType(BAutoGenAlarm.class);


    String extName = "";
    String bql = "" ;
    String type = "";
}
